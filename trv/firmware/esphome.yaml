# https://esphome.io/components/display/st7789v.html
substitutions:
  hostid: trv
  hostname: My room TRV
  comment: My custom built awesome TRV
  node_platform: esp32
  node_board: featheresp32
  
packages:
  core: !include common/core.yaml 
  basic_sensors: !include common/basic_sensors.yaml
  fonts: !include common/fonts.yaml


esphome:
  on_boot:
    priority: 350
    then:
      - light.turn_on: ${hostid}_backlight
      - climate.control:
          id: ${hostid}
          mode: "OFF"
      #- script.execute: calibrate_endstop_durations
      #- wait_until:
      #    lambda: "return !id(calibrate_endstop_durations).is_running();"
      - climate.control:
          id: ${hostid}
          mode: "AUTO"
      - logger.log: "TRV is ready!"
  on_loop:
    then:
        # Main loop iteration time
      - lambda: >-
          id(main_loop_time) = millis() - id(latest_main_loop_time);
          id(latest_main_loop_time) = millis();
        
        # Compute current position / progress of motor
      - lambda: >-
          if (id(is_at_closed_endstop) || id(is_at_open_endstop)) {
            id(progress_ratio) = (float)id(is_at_open_endstop);
          }
          
          if (id(${hostid}_motor_power).state) {
            bool is_opening = id(open_valve).state && !id(close_valve).state;
            float timing = is_opening ? id(valve_open_duration) : id(valve_close_duration);
            float step = 1.0 / timing * id(main_loop_time);
            int direction_factor = (int)is_opening * 2 - 1;
            id(progress_ratio) += step * (float)direction_factor;
          }
          id(progress_ratio) = constrain(id(progress_ratio)*100, 0, 100) / 100.0;
          return;
  on_shutdown:
    - switch.turn_off: ${hostid}_motor_power


dallas:
  - pin: 15
    update_interval: 10s


spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19


globals:
  - id: is_at_open_endstop
    type: bool
    initial_value: 'false'
    restore_value: true
  
  - id: is_at_closed_endstop
    type: bool
    initial_value: 'false'
    restore_value: true

  - id: valve_pace_time_start
    type: int
    initial_value: '0'
    restore_value: false

  - id: valve_open_duration
    type: int
    initial_value: '40000'
    restore_value: true

  - id: valve_close_duration
    type: int
    initial_value: '47000'
    restore_value: true

  - id: progress_ratio
    type: float
    initial_value: '0.0'
    restore_value: true

  - id: latest_main_loop_time
    type: int
    initial_value: '0'
    restore_value: false

  - id: main_loop_time
    type: int
    initial_value: '0'
    restore_value: false
    
    
    

binary_sensor:
  - platform: gpio
    name: ${hostname} Button 0
    id: ${hostid}_button_0
    pin:
      number: GPIO0
      inverted: true
  - platform: gpio
    name: ${hostname} Button 1
    id: ${hostid}_button_1
    pin:
      number: GPIO35
      inverted: true

    # Registrer when the motor stalls = endstop
  - platform: template
    id: ${hostid}_endstop
    name: ${hostname} Endstop
    lambda: "return (id(${hostid}_current_sensing_internal).state > 0.2);"
    on_press:
      then:
        - lambda: |-
            id(is_at_closed_endstop) = (bool)(id(close_valve).state);
            id(is_at_open_endstop) = (bool)(id(open_valve).state);
        - switch.turn_off: ${hostid}_motor_power
    internal: true

    # Display if a calibration is running on the TRV
  - platform: template
    id: ${hostid}_calibration_is_running
    name: ${hostname} Calibration Is Running
    lambda: "return id(calibrate_endstop_durations).is_running();"


switch:

    # Make the motor go one way
  - platform: gpio
    id: open_valve
    name: ${hostname} Open Valve
    pin: 33
    interlock: &interlock [close_valve, open_valve]
    interlock_wait_time: 500ms
    internal: false
    
    # Make the motor go the other way
  - platform: gpio
    id: close_valve
    name: ${hostname} Close Valve
    pin: 32
    interlock: *interlock
    interlock_wait_time: 500ms
    internal: false
    
    # Disable power to H-bridge
  - platform: template
    id: ${hostid}_motor_power
    name: ${hostname} Motor Enable
    lambda: "return (id(close_valve).state || id(open_valve).state );"
    turn_off_action:
      - switch.turn_off: close_valve
      - switch.turn_off: open_valve
    internal: true
    


sensor:
    # Sense the current used by the motor
  - platform: adc
    id: ${hostid}_current_sensing_internal
    name: ${hostname} Current Sensing Internal
    pin: 39
    update_interval: 100ms
    filters:
      - sliding_window_moving_average:
          window_size: 8
          send_every: 1
#    unit_of_measurement: mA
    internal: true
    
    # Expose the current estimated motor position
  - platform: template
    id: ${hostid}_valve_open_percentage
    name: ${hostname} Valve Open Percentage
    lambda: "return id(progress_ratio) * 100;"
    unit_of_measurement: "%"
    update_interval: 2s
    
    # Read the room temperature
  - platform: dallas
    name: ${hostname} Temperature
    id: ${hostid}_internal_temperature
    address: 0xC001202503020528
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1

    # Expose a less updated temperature reading to HA
  - platform: template
    id: ${hostid}_temperature
    name: ${hostname} Temperature
    lambda: "return (float)id(${hostid}_internal_temperature).state;"
    unit_of_measurement: "°C"
    update_interval: 30s



light:
    # Control screen brightness
  - platform: monochromatic
    name: ${hostname} Backlight
    id: ${hostid}_backlight
    output: ${hostid}_screen_brightness



output:
    # PWM control output source for the screen brightness
  - platform: ledc
    pin: 4
    frequency: 19531 Hz
    id: ${hostid}_screen_brightness

    # Set valve needle to specific position
  - platform: template
    id: set_motor_position
    type: float
    write_action:
      - if:
          condition:
            lambda: "return id(progress_ratio) < state;"
          then:
            - switch.turn_on: open_valve
            - wait_until:
                lambda: "return id(progress_ratio) >= state;"
            - switch.turn_off: ${hostid}_motor_power
          else:
            - switch.turn_on: close_valve
            - wait_until:
                lambda: "return id(progress_ratio) <= state;"
            - switch.turn_off: ${hostid}_motor_power



climate:
    # Automatic control of climate
  - platform: thermostat
    name: ${hostname}
    id: ${hostid}
    visual:
      min_temperature: 15 °C
      max_temperature: 35 °C
      temperature_step: 0.5 °C
    sensor: ${hostid}_internal_temperature
    hysteresis: 0 °C
    default_target_temperature_low: 20 °C
    default_target_temperature_high: 24 °C
    away_config:
      default_target_temperature_low: 15
      default_target_temperature_high: 20
    cool_action:
      - switch.turn_on: close_valve
    heat_action:
      - switch.turn_on: open_valve
    idle_action:
      - switch.turn_off: ${hostid}_motor_power
    



color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

display:
  - platform: st7789v
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 270
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));
      it.printf(0, 20, id(roboto_regular), "%.f C", id(${hostid}_temperature).state);
      
      if (id(${hostid}_status).state) {
        it.print(235, 5, id(roboto_regular), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else 
      {
        it.print(235, 5, id(roboto_regular), id(my_red), TextAlign::TOP_RIGHT, "Offline");
      }



script:
  - id: calibrate_endstop_durations
    then:
      - switch.turn_on: open_valve  # Prepare for calibration
      - wait_until:
          binary_sensor.is_on: ${hostid}_endstop
      - delay: 1s
      - globals.set:  # Close duration
          id: valve_pace_time_start
          value: !lambda "return millis();"
      - switch.turn_on: close_valve
      - wait_until:
          binary_sensor.is_on: ${hostid}_endstop
      - globals.set:
          id: valve_close_duration
          value: !lambda "return (millis() - id(valve_pace_time_start));"
      - delay: 1s
      - globals.set: # Open duration
          id: valve_pace_time_start
          value: !lambda "return millis();"
      - switch.turn_on: open_valve
      - wait_until:
          binary_sensor.is_on: ${hostid}_endstop
      - globals.set:
          id: valve_open_duration
          value: !lambda "return (millis() - id(valve_pace_time_start));"
